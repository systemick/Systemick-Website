<?php

/**
 * @file
 * Implements block and page callback to display Systemick tweets
 */

define('MAX_TWEETS', 50);
define('BLOCK_TWEETS', 3);
ini_set('display_errors', TRUE);

/**
  * Implementation of hook_help().
  */
function tweets_help($path, $arg) {
  switch($path) {
    case 'admin/help#tweets':
      return '<p>' . t('A module to display tweets both on a page and as a block') . '</p>';
      break;
  }
}

/**
  * Implementation of hook_menu().
  */
function tweets_menu() {
  $menu['tweets'] = array(
    'title' => 'Tweets',
    'access callback' => TRUE,
    'page callback' => 'tweets_page',
    'type' => MENU_CALLBACK,
  );
  $menu['admin/settings/tweets'] = array(
    'title' => 'Tweets Settings',
    'description' => 'Change URLs and account name for Tweets',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tweets_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $menu;
}

/**
  * Implementation of hook_theme().
  */
function tweets_theme() {
  return array(
    'tweet' => array(
      'arguments' => array('content' => NULL),
      'template' => 'tweet',
    ),
  );
}

/**
  * Implementation of hook_admin_settings().
  */
function tweets_admin_settings() {
  $form['tweets_twitter_api'] = array(
    '#type' => 'textfield',
    '#title' => 'Twitter API URL',
    '#required' => TRUE,
    '#default_value' => variable_get('tweets_twitter_api', ''),
    '#description' => t('Enter URL of the Twitter API'),
  );
  $form['tweets_user_name'] = array(
    '#type' => 'textfield',
    '#title' => 'Twitter Account',
    '#required' => TRUE,
    '#default_value' => variable_get('tweets_user_name', ''),
    '#description' => t('Enter username of the Twitter user'),
  );
  return system_settings_form($form);
}

/**
  * Implementation of hook_block_info().
  */
function tweets_block_info() {
  $blocks = array();
  $blocks['recent_tweets'] = array(
    'info' => t('Recent tweets'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
  * Implementation of hook_block_info().
  */
function tweets_block_view($block_name = '') {
  if($block_name == 'recent_tweets') {
    $tweets = tweets_content(BLOCK_TWEETS);
    $follow_image = array(
      'path' => drupal_get_path('module', 'tweets').'/tweets.png',
      'alt' => 'Follow Systemick on Twitter',
      'title' => 'Follow Systemick on Twitter',
      'attributes' => array('class' => 'follow-image'),
    );
    $block = array();
    $block['subject'] = t('Recent Tweets');
    $block['content']['list'] = array(
      '#theme' => 'item_list',
      '#items' => $tweets,
    );
    $block['content']['more'] = array(
      '#markup' => l('See more tweets...', 'tweets', array('attributes' => array('class' => 'more-link'))),
    );
    $block['content']['follow'] = array(
      '#markup' => l(theme('image', $follow_image), 'http://twitter.com/systemick', array('html' => TRUE)),
    );
    return $block;
  }
}

/**
 * Format tweets content to display in a page callback.
 *
 * @param $tweet_count
 *   The number of tweets to display. If FALSE all tweets will be displaed
 */
function tweets_page($tweet_count = FALSE) {
  drupal_set_title('Recent Tweets');
  $tweets = tweets_content($tweet_count);
  $variables = array();
  $variables['items'] = $tweets;
  $variables['title'] = '';
  $variables['type'] = 'ul';
  $variables['attributes'] = array('id' => 'tweets-page-list');
  return array('#markup' => theme('item_list', $variables));
}

/**
 * Get a number of tweets to display in a page or a block.
 *
 * @param $tweet_count
 *   The number of tweets to display. If FALSE all tweets will be displayed
 */
function tweets_content($tweet_count) {
  $results = tweets_get_tweets($tweet_count);
  $tweets_user_name = variable_get('tweets_user_name', 'systemick');
  $twitter_api_url = variable_get('twitter_api_url', 'twitter.com');

  $url = (substr($twitter_api_url, 0, 7) == 'http://') ? '' : 'http://' . $twitter_api_url . '/' . $tweets_user_name . '/status/';

  $reply_url = (substr($twitter_api_url, 0, 7) == 'http://') ? '' : 'http://' . $twitter_api_url . '/?status=@' . $tweets_user_name . '&in_reply_to_status_id=';

  $tweets = array();
  foreach($results as $result) {
    $result['tweet_link'] = l(_tweets_get_time_since($result['created_time']), $url.$result['id']);
    $result['reply_link'] = l('Reply', $reply_url . $result['id'] . '&in_reply_to=' . $tweets_user_name);
    $tweets[] = theme('tweet', $result);
  }
  return $tweets;
}

/**
 * Get tweets from the twitter site.
 *
 * @param $tweet_count
 *   The number of tweets to display. If FALSE all tweets will be displaed
 * @param $filter_since
 *   A boolean to determine whether we get tweets after a certain date.
 * @param $cache
 *   A boolean indicating whether to store each tweet in the database.
 */
function tweets_get_tweets($tweet_count = FALSE, $filter_since = TRUE, $cache = TRUE) {
  // This function was adapted from twitter_get_timeline
  // in the D6 twitter module. I'm not sure why we use the $since variable
  $tweets_user_name = variable_get('tweets_user_name', 'systemick');
  if ($filter_since) {
    $sql  = "SELECT t.created_at FROM {tweets} t WHERE t.screen_name = :name ORDER BY t.created_at DESC";
    $result = db_query($sql, array(':name' => $tweets_user_name));
    $object = $result->fetch();
    $since = $object->created_at;
  }

  $twitter_api_url = variable_get('twitter_api_url', 'twitter.com');
  $url = (substr($twitter_api_url, 0, 7) == 'http://') ? '' : 'http://' . $twitter_api_url . "/statuses/user_timeline/$tweets_user_name.xml";
  if (!empty($since)) {
    $url .= '?since='. urlencode($since);
  }

  if(!$xml = file_get_contents($url)) {
    return array();
  }
  else {
    $results = _tweets_convert_xml_to_array($xml);
  }

  if ($cache) {
    foreach($results as $status) {
      $status['tid'] = $status['twitter_id'];
      twitter_cache_status($status);
    }
  }
  if(is_int($tweet_count)) {
    $results = array_slice($results, 0, 3);
  }
  return $results;
}

/**
 * Saves Twitter status message to the database.
 *
 * @param $status
 *   A Twitter status updated in array form.
 * @param $silent
 *   A boolean indicating whether hook_twitter_status_update should be fired.
 *
 * @see twitter_cache_status()
 */
function twitter_cache_status($status = array()) {
  $num_deleted = db_delete('tweets')
    ->condition('tid', $status['twitter_id'])
    ->execute();

  $tid = db_insert('tweets')
    ->fields(array(
      'tid' => $status['twitter_id'],
      'screen_name' => $status['screen_name'],
      'created_at' => $status['created_at'],
      'created_time' => $status['created_time'],
      'text' => $status['text'],
      'source' => $status['source'],
      'in_reply_to_status_id' => $status['in_reply_to_status_id'],
      'in_reply_to_user_id' => $status['in_reply_to_user_id'],
      'in_reply_to_screen_name' => $status['in_reply_to_screen_name'],
      'truncated' => (int)$status['truncated'])
    )
    ->execute();
}

function _tweets_convert_xml_to_array($data) {
  $results = array();
  $xml = new SimpleXMLElement($data);
  if (!empty($xml->name)) {
    // Top-level user information.
    $results[] = _tweets_convert_user($xml);
    return $results;
  }
  if (!empty($xml->user)) {
    foreach($xml->user as $user) {
      $results[] = _tweets_convert_user($user);
    }
  }
  elseif (!empty($xml->status)) {
    foreach($xml->status as $status) {
      $results[] = _tweets_convert_status($status);
    }
  }
  return $results;
}

function _tweets_convert_status($status) {
  $result = (array)$status;
  $result['twitter_id'] = $result['id'];
  if (!empty($result['user']) && is_object($result['user'])) {
    $result['account'] = _tweets_convert_user($result['user']);
    $result['screen_name'] = $result['account']['screen_name'];
  }
  else {
    $result['screen_name'] = NULL;
  }
  $result['created_time'] = strtotime($result['created_at']);

  // These come in as objects rather than strings IF they are empty, curiously
  // enough. We want nulls, so we'll special case them.
  foreach (array('in_reply_to_status_id', 'in_reply_to_user_id', 'in_reply_to_screen_name') as $key) {
    if (is_object($result[$key])) {
      $result[$key] = NULL;
    }
  }
  return $result;
}

function _tweets_convert_user($user) {
  $result = (array)$user;
  $result['twitter_uid'] = $result['id'];
  if (!empty($result['status']) && is_object($result['status'])) {
    $result['status'] = _tweets_convert_status($result['status']);
  }
  return $result;
}

function _tweets_get_time_since($timestamp) {
  $time_difference = time() - $timestamp;
  $one_day = 24 * 60 * 60;
  $days_difference = floor($time_difference / $one_day);
  $twelve_hours = 12 * 60 * 60;
  $two_days = 2 * $one_day;
  $one_hour = 60 * 60;
  if ($time_difference < $twelve_hours) {
    $minutes = floor($time_difference / 60);
    return $minutes . ' minutes ago';
  } else if ($time_difference < $twelve_hours) {
    $hours = floor($time_difference / $one_hour);
    return $hours . ' hours ago';
  } else if ($time_difference < $one_day && date('N') == date('N', $timestamp)) {
    return 'Earlier today';
  } else if ($time_difference < $one_day && date('N') != date('N', $timestamp)) {
    return 'Yesterday';
  } else if ($time_difference < $two_days && date('N') - date('N', $timestamp) == 1) {
    return 'Yesterday';
  } else {
    return $days_difference . ' days ago';
  }
}